name: UNIT-TESTING

on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debugging logs'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  # STAGE 1: Setup and Validation
  setup:
    name: Environment Setup
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify runner environment
        run: |
          echo "Running on self-hosted runner"
          echo "Java version:"
          java -version
          echo "Maven version:"
          mvn --version

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

  # STAGE 2: Unit Tests
  unit-test:
    needs: setup
    name: Run Unit Tests
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Run Tests
        run: mvn test -B ${{ github.event.inputs.debug == 'true' && '-X' || '' }}
      
      - name: Test Summary
        if: always()
        run: |
          echo "Test execution completed"
          # Check if surefire reports exist and display summary
          if [ -d "target/surefire-reports" ]; then
            echo "Test reports available at target/surefire-reports"
            find target/surefire-reports -name "*.txt" -exec cat {} \; | grep "Tests run:"
          else 
            echo "No test reports found"
          fi
      
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4  # Updated from v3 to v4
        with:
          name: test-reports
          path: target/surefire-reports/
          if-no-files-found: ignore

  # STAGE 3: Package Build
  build:
    needs: unit-test
    name: Build Package
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build JAR file
        run: mvn package -DskipTests
        
      - name: Display JAR file information
        run: |
          echo "==== JAR FILE INFORMATION ===="
          # List all JAR files in the target directory
          echo "Searching for JAR files in target directory..."
          find target -name "*.jar" -type f | while read jarfile; do
            echo "Found JAR file: $jarfile"
            echo "File size: $(du -h "$jarfile" | cut -f1)"
            echo "Created at: $(stat -c %y "$jarfile")"
            echo "JAR contents summary: $(jar -tf "$jarfile" | wc -l) files"
            echo "---------------------------------"
          done
          
          # Highlight the main application JAR
          MAIN_JAR=$(find target -maxdepth 1 -name "*.jar" -not -name "*sources*" -not -name "*javadoc*" -not -name "*tests*" -type f | head -n 1)
          if [ -n "$MAIN_JAR" ]; then
            echo "MAIN APPLICATION JAR: $MAIN_JAR"
            echo "This is the primary executable JAR file generated from your build."
            echo "You can run it using: java -jar $MAIN_JAR"
            echo "This JAR file will be used in the Docker image for deployment."
          else
            echo "No main application JAR found in target directory."
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4  # Updated from v3 to v4
        with:
          name: application-jar
          path: target/*.jar
          if-no-files-found: error
