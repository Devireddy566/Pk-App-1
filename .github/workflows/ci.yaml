name: CI PIPELINE-(DEV)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Image Version Tag'
        required: true
        default: 'v-1'

jobs:
  # STAGE 1: Security Scanning with GitLeaks
  security-scan:
    name: Security Scan
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Updated from v3 to v4
      
      - name: Run GitLeaks Scan
        uses: gitleaks/gitleaks-action@v2
        with:
          fail_build: true
          verbose: true
  
  # STAGE 2: Build with Maven
  build:
    needs: security-scan
    name: Maven Build
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Updated from v3 to v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4  # Updated from v3 to v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Build with Maven
        run: mvn clean install
      
      # We need to make the build artifacts available for the next jobs
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4  # Updated from v3 to v4
        with:
          name: app-artifacts
          path: target/*.jar


  # STAGE 4: Build Docker Image
  docker-build:
    needs: [build, code-quality]  # Now depends on both build and code-quality
    name: Docker Build
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-artifacts
          path: target
      
      - name: Configure Google Cloud Auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT }}'
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v1'
      
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
      
      # Push JAR files to GCR as artifacts
      - name: Push JAR to Artifact Registry
        run: |
          echo "Uploading JAR files to Artifact Registry..."
          # Create directory for storing JAR files
          mkdir -p jar-artifacts
          cp target/*.jar jar-artifacts/
          
          # Upload JAR files to GCR
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          JAR_PREFIX="us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/pk-docker-repo-dev/jars"
          
          for jarfile in jar-artifacts/*.jar; do
            JARNAME=$(basename "$jarfile")
            echo "Uploading $JARNAME to Artifact Registry..."
            gcloud artifacts jars upload "$JAR_PREFIX/$JARNAME" \
              --source="$jarfile" \
              --location=us-central1 \
              --project=${{ secrets.GCP_PROJECT_ID }} || echo "Failed to upload JAR"
          done
      
      - name: Build Docker image
        env:
          IMAGE_NAME: "us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/pk-docker-repo-dev/app-1"
          IMAGE_TAG: "${{ github.event.inputs.version }}"
        run: |
          echo "Building image: ${IMAGE_NAME}:${IMAGE_TAG}"
          docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
  
  # STAGE 5: Push to Registry
  deploy:
    needs: docker-build
    name: Push to Registry
    runs-on: self-hosted
    steps:
      - name: Configure Google Cloud Auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT }}'
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v1'
      
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
      
      - name: Push Docker image
        env:
          IMAGE_NAME: "us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/pk-docker-repo-dev/app-1"
          IMAGE_TAG: "${{ github.event.inputs.version }}"
        run: |
          echo "Pulling image before push: ${IMAGE_NAME}:${IMAGE_TAG}"
          docker pull ${IMAGE_NAME}:${IMAGE_TAG} || echo "Image not found locally, will be built and pushed"
          echo "Pushing image: ${IMAGE_NAME}:${IMAGE_TAG}"
          docker push ${IMAGE_NAME}:${IMAGE_TAG}

      # STAGE 6:Update Helm chart repo with new image tag and push ---
      - name: Update Helm chart with new image tag
        run: |
          # Clone the Helm chart repo
          git clone https://github.com/Devireddy566/Pk-Helm-Charts.git
          cd "Pk-Helm-Charts/PK-APP-1  - Helm charts/my-helm-chart"
          # Update the image tag in values.yaml (assumes YAML key is image.tag)
          sed -i "s/^\([ ]*tag:[ ]*\).*/\1'${IMAGE_TAG}'/" values.yaml
          git add values.yaml
          git commit -m "ci: update image tag to ${IMAGE_TAG} [skip ci]" || echo "No changes to commit"
          git push origin main
          echo "Helm chart updated with new image tag: ${IMAGE_TAG}"

  # STAGE 7: Cleanup
  cleanup:
    needs: deploy
    name: Cleanup
    runs-on: self-hosted
    if: always()
    steps:
      - name: Clean Docker resources
        run: |
          echo "Cleaning Docker resources..."
          # Remove specific image and unused images
          IMAGE_NAME="us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/pk-docker-repo-dev/app-1:${{ github.event.inputs.version }}"
          docker rmi ${IMAGE_NAME} || true
          docker system prune -f

      - name: Clean Maven cache
        run: |
          echo "Cleaning Maven cache..."
          rm -rf ~/.m2/repository/* || true

      - name: Clean workspace
        run: |
          echo "Cleaning workspace..."
          rm -rf ./* ./.git
          rm -rf /tmp/* || true
      
      